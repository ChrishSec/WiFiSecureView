"""

__author__ = "ChrishSec"
__copyright__ = "Copyright (C) 2024 ChrishSec"
__license__ = "GNU General Public License v3.0"
__version__ = "1.0.0"

Website: https://ChrishSec.com
GitHub: https://github.com/ChrishSec
Twitter: https://twitter.com/ChrishSec

"""

import os
import re
import base64
import tkinter as tk
from tkinter import messagebox, PhotoImage

def get_wlans():
    data = os.popen("netsh wlan show profiles").read()
    wifi = re.compile(r"All User Profile\s*:(.*)")
    return wifi.findall(data)

def get_pass(network):
    try:
        wlan = os.popen("netsh wlan show profile "+str(network.replace(" ","*"))+" key=clear").read()
        pass_regex = re.compile(r"Key Content\s*:(.*)")
        return pass_regex.search(wlan).group(1)
    except:
        return " "

def on_select(event):
    network = network_listbox.get(network_listbox.curselection())
    password_label.config(text="\n Password > " + get_pass((network)) + "\n")
def save_to_file():
    f = open("WiFiSecureView.txt","w")
    for wlan in get_wlans():
        f.write("\n-----------\n"+" WiFi : "+wlan + "\n Password : " + get_pass(wlan))
    f.close()
    messagebox.showinfo("Information", "File saved successfully")

image_data = ""

root = tk.Tk()
root.title("WiFiSecureView  -  ChrishSec.com")

image = PhotoImage(data=base64.b64decode(image_data))
root.iconphoto(True, image)

network_label = tk.Label(root, text="\nWiFi Networks\n")
network_label.pack()

network_listbox = tk.Listbox(root)
network_listbox.pack()

for wlan in get_wlans():
    network_listbox.insert(tk.END, wlan)

network_listbox.bind('<<ListboxSelect>>', on_select)

password_label = tk.Label(root, text="\n Developed by >> ChrishSec \n")
password_label.pack()

save_button = tk.Button(root, text="Save to File", command=save_to_file)
save_button.pack()

root.mainloop()
